{
  "author": {
    "name": "Kenan Shifflett",
    "email": "kenan.shifflett@gmail.com"
  },
  "name": "dwolla",
  "description": "Dwolla API for node.js",
  "keywords": [
    "dwolla",
    "payment"
  ],
  "contributors": [
    {
      "name": "Dan Milon",
      "email": "danmilon@gmail.com"
    },
    {
      "name": "Rob Putnam"
    }
  ],
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "git@github.com:nanek/node-dwolla.git"
  },
  "main": "lib/dwolla.js",
  "engines": {
    "node": ">=0.4.7 <0.10.0"
  },
  "dependencies": {},
  "devDependencies": {
    "should": ">=0.6.3",
    "mocha": ">=1.2.2"
  },
  "scripts": {
    "test": "mocha -t 6000"
  },
  "readme": "# Dwolla API for node.js\n[Dwolla Developers](https://www.dwolla.com/developers)\n\n## Methods\n\nRequires your Dwolla application client_id and client_secret.\n\n  * basicAccountInfo(client_id, client_secret, id, fn)\n  * nearby(client_id, client_secret, lat, lon, [, params], fn)\n  * register(client_id, client_secret, userInfo, fn)\n\nRequires a valid user OAuth2 token. Note tokens do not expire and may be\nreused.\n\n  * fullAccountInfo(oauth_token, fn)\n  * balance(oauth_token, fn)\n  * contacts(oauth_token[, params], fn)\n  * transactions(oauth_token[, params], fn)\n  * transactionById(oauth_token, id, fn)\n  * transactionsStats(oauth_token[, params], fn)\n  * send(oauth_token, pin, destinationId, amount[, params], fn)\n  * request(oauth_token, pin, sourceId, amount[, params], fn)\n  * fundingSources(oauth_token, fn)\n  * fundingSourceById(oauth_token, id, fn)\n  * deposit(oauth_token, pin, sourceId, amount, fn)\n  * fulfill(oauth_token, pin, sourceId[, params], fn)\n  * pending(oauth_token, callback)\n  * withdraw(oauth_token, pin, sourceId, amount, fn)\n\nAll optional parameters are passed in as an optional object before the callback.\n\n### How to obtain a Dwolla OAuth2 token\n\nTo authenticate a user, follow the examples from one of the following modules.\n\n#### everyauth\n\n[everyauth](http://everyauth.com/) is an authentication and authorization module for your node.js Connect and Express apps. See http://everyauth.com/#other-modules/dwolla-oauth2\n\n#### passport-dwolla\n\n[Passport](http://passportjs.org/) is authentication middleware for Node.js, popular for being lightweight, modular, and flexible. A strategy for authenticating with Dwolla, along with an example, is available in the [passport-dwolla](https://github.com/jaredhanson/passport-dwolla) module.\n\n#### Dwolla Developer Site\n\nThe Dwolla [Generate Token](http://developers.dwolla.com/dev/token) tool allows you\ncreate a valid OAuth token for testing purposes.\n\n## Installation\n\n    $ npm install dwolla\n\n## Example Usage\nSee more examples in the examples folder.\n\n    var dwolla = require('dwolla');\n\n    // get oauth_token, be sure to set the proper scope\n    // use oauth lib or everyauth to setup OAuth2\n    // see everyauth for example Dwolla authentication\n    var token = req.session.oauth_token;\n\n    dwolla.fullAccountInfo(token, function(err, data) {\n      console.log(\"Full Account Info: \" + data);\n    });\n\n    dwolla.transactions(token, function(err, data) {\n      console.log(\"Transactions: \" + data);\n    });\n\n    var params = {};\n    params.search = 'Ben';\n    params.types = 'All';\n    dwolla.contacts(token, params, function(err, data) {\n      console.log(\"Contacts: \" + data);\n    });\n\n## Tests\nTests use mocha and should.js. Tests were made only for GET requests,\nas tests of POST requests would be processed just like real requests.\nAlthough working examples of each POST request can be found in the\nexamples folder.\n\n    $ npm test\n\nor\n\n    $ mocha\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nanek/node-dwolla/issues"
  },
  "_id": "dwolla@0.1.1",
  "_from": "dwolla@"
}
